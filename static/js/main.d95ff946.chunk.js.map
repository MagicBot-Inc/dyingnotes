{"version":3,"sources":["index.js"],"names":["__webpack_require__","r","__webpack_exports__","connect","__makeFakeFile","dataUrl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","init","newConnect","shareStory","app_id","story","_ref","_ref$add_to_news","add_to_news","_ref$user_ids","user_ids","Promise","resolve","reject","send","scope","then","response","access_token","data","method","params","join","link_text","link_url","v","uploadUrl","upload_url","request","FormData","append","fetch","body","json","catch","error_code","error_text","generateStoryFromTemplate","templateUrl","fields","arguments","undefined","canvas","document","createElement","width","height","ctx","getContext","background","Image","onload","drawImage","forEach","field","font","textAlign","align","fillStyle","color","fillText","value","x","y","toDataURL","src"],"mappings":"sHAAAA,EAAAC,EAAAC,GAAA,IAGIC,EAAU,KA+DRC,EAAiB,SAACC,EAASC,GAG7B,IAFA,IAAIC,EAAMF,EAAQG,MAAM,KAAMC,EAAOF,EAAI,GAAGG,MAAM,WAAW,GACzDC,EAAOC,KAAKL,EAAI,IAAKM,EAAIF,EAAKG,OAAQC,EAAQ,IAAIC,WAAWH,GAC3DA,KAAKE,EAAMF,GAAKF,EAAKM,WAAWJ,GACtC,OAAO,IAAIK,KAAK,CAACH,GAAQT,EAAU,CAAEa,KAAMV,KAGhCP,EAAA,SAAEkB,KArEJ,SAACC,GACVlB,EAAUkB,GAoESC,WAjEJ,SAACC,EAAQC,EAATC,GAAA,IAAAC,EAAAD,EAAkBE,mBAAlB,IAAAD,KAAAE,EAAAH,EAAuCI,gBAAvC,IAAAD,EAAkD,GAAlDA,EAAA,OAA2D,IAAIE,QAAQ,SAACC,EAASC,GAChG7B,EAAQ8B,KAAK,uBAAwB,CAAEV,SAAQW,MAAO,YACjDC,KAAK,SAACC,GACH,IAAMC,EAAeD,EAASE,KAAKD,aACnClC,EAAQ8B,KAAK,wBAAyB,CAClCM,OAAQ,+BACRC,OAAQ,CACJH,eACAV,YAAaA,EAAc,IAAK,IAChCE,SAAUA,EAASY,KAAK,KACxBC,UAAW,OACXC,SAAU,qBAAuBpB,EACjCqB,EApBG,UAuBNT,KAAK,SAACC,GACH,IAAMS,EAAYT,EAASE,KAAKF,SAASU,WAEnCC,EAAU,IAAIC,SACpBD,EAAQE,OAAO,OAAQ7C,EAAeoB,EAAO,cAE7C0B,MA5BD,uCA4BoBL,EAAW,CAC1BN,OAAQ,OACRY,KAAMJ,IAELZ,KAAK,SAACC,GAAD,OAAcA,EAASgB,SAC5BjB,KAAK,SAACC,GAAD,OAAcL,EAAQK,EAASA,SAASZ,SAC7C6B,MAAM,kBAAMrB,EAAO,CAAEsB,WAAY,EAAGC,WAAY,2BAExDF,MAAM,kBAAMrB,EAAO,CAAEsB,WAAY,EAAGC,WAAY,6BAExDF,MAAM,kBAAMrB,EAAO,CAAEsB,WAAY,EAAGC,WAAY,gCAkCtBC,0BA/BD,SAACC,GAAD,IAAcC,EAAdC,UAAA7C,OAAA,QAAA8C,IAAAD,UAAA,GAAAA,UAAA,GAAuB,GAAvB,OAA8B,IAAI7B,QAAQ,SAACC,GACzE,IAAM8B,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQ,KACfH,EAAOI,OAAS,KAEhB,IAAMC,EAAML,EAAOM,WAAW,MAExBC,EAAa,IAAIC,MACvBD,EAAWE,OAAS,WAChBJ,EAAIK,UAAUH,EAAY,EAAG,GAE7BV,EAAOc,QAAQ,SAACC,GACZP,EAAIQ,KAAOD,EAAMC,KACjBR,EAAIS,UAAYF,EAAMG,MACtBV,EAAIW,UAAYJ,EAAMK,MACtBZ,EAAIa,SAASN,EAAMO,MAAOP,EAAMQ,EAAGR,EAAMS,KAG7CnD,EAAQ8B,EAAOsB,cAEnBf,EAAWgB,IAAM3B","file":"static/js/main.d95ff946.chunk.js","sourcesContent":["const VK_API_VERSION = \"5.95\";\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\nlet connect = null;\nconst init = (newConnect) => {\n    connect = newConnect;\n};\n\nconst shareStory = (app_id, story, { add_to_news = false, user_ids = [] }) => new Promise((resolve, reject) => {\n    connect.send(\"VKWebAppGetAuthToken\", { app_id, scope: \"stories\" })\n        .then((response) => {\n            const access_token = response.data.access_token;\n            connect.send(\"VKWebAppCallAPIMethod\", {\n                method: \"stories.getPhotoUploadServer\",\n                params: {\n                    access_token,\n                    add_to_news: add_to_news ? \"1\": \"0\",\n                    user_ids: user_ids.join(\",\"),\n                    link_text: \"open\",\n                    link_url: \"https://vk.com/app\" + app_id,\n                    v: VK_API_VERSION\n                }\n            })\n                .then((response) => {\n                    const uploadUrl = response.data.response.upload_url;\n\n                    const request = new FormData();\n                    request.append(\"file\", __makeFakeFile(story, \"story.png\"));\n\n                    fetch(CORS_PROXY + uploadUrl, {\n                        method: \"POST\",\n                        body: request\n                    })\n                        .then((response) => response.json())\n                        .then((response) => resolve(response.response.story))\n                        .catch(() => reject({ error_code: 3, error_text: \"Can't upload story\" }))\n                })\n                .catch(() => reject({ error_code: 2, error_text: \"Can't get upload url\" }))\n        })\n        .catch(() => reject({ error_code: 1, error_text: \"Can't get access_token\" }))\n});\n\nconst generateStoryFromTemplate = (templateUrl, fields = []) => new Promise((resolve) => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 1080;\n    canvas.height = 1920;\n\n    const ctx = canvas.getContext(\"2d\");\n\n    const background = new Image();\n    background.onload = () => {\n        ctx.drawImage(background, 0, 0);\n\n        fields.forEach((field) => {\n            ctx.font = field.font;\n            ctx.textAlign = field.align;\n            ctx.fillStyle = field.color;\n            ctx.fillText(field.value, field.x, field.y);\n        });\n\n        resolve(canvas.toDataURL());\n    };\n    background.src = templateUrl;\n});\n\n// Helpers\nconst __makeFakeFile = (dataUrl, filename) => {\n    let arr = dataUrl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n    while(n--) u8arr[n] = bstr.charCodeAt(n);\n    return new File([u8arr], filename, { type: mime });\n};\n\nexport default { init, shareStory, generateStoryFromTemplate };"],"sourceRoot":""}